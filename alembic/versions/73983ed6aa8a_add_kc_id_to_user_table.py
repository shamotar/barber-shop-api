"""Add kc_id to user table

Revision ID: 73983ed6aa8a
Revises: b01fc8702548
Create Date: 2025-04-04 01:49:40.260613

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql

import os
from dotenv import load_dotenv
from keycloak import KeycloakOpenIDConnection, KeycloakAdmin

load_dotenv()
# Keycloak Admin (For User Management)
keycloak_admin_connection = KeycloakOpenIDConnection(
    server_url=os.getenv("KEYCLOAK_SERVER_URL"),
    username=os.getenv("KEYCLOAK_ADMIN_USERNAME"),
    password=os.getenv("KEYCLOAK_ADMIN_PASSWORD"),
    realm_name=os.getenv("KEYCLOAK_REALM"),
    client_id=os.getenv("KEYCLOAK_API_CLIENT_ID"),
    client_secret_key=os.getenv("KEYCLOAK_API_SECRET"),
    verify=True,
)
keycloak_admin = KeycloakAdmin(connection=keycloak_admin_connection)

# revision identifiers, used by Alembic.
revision: str = "73983ed6aa8a"
down_revision: Union[str, None] = "b01fc8702548"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "service",
        "description",
        existing_type=mysql.VARCHAR(length=500),
        type_=sa.String(length=255),
        existing_nullable=False,
    )
    op.add_column("user", sa.Column("kc_id", sa.String(length=50), nullable=False))
    # Synchronize the new column with the existing data
    # Get all users from the database
    connection = op.get_bind()
    users = connection.execute(sa.select("*").select_from(sa.text("user"))).fetchall()
    # Update each user with a new kc_id
    for user in users:
        # Get the kc_id from the AuthService
        try:
            kc_id = keycloak_admin.get_user_id(user.email)
            # Update the user in the database
            op.execute(
                sa.text(
                    "UPDATE user SET kc_id = :kc_id WHERE user_id = :user_id"
                ).params(kc_id=kc_id, user_id=user.user_id)
            )
        except Exception as e:
            print(f"Error updating kc_id for user {user.user_id}: {e}")
            pass
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column("user", "kc_id")
    op.alter_column(
        "service",
        "description",
        existing_type=sa.String(length=255),
        type_=mysql.VARCHAR(length=500),
        existing_nullable=False,
    )
    # ### end Alembic commands ###
