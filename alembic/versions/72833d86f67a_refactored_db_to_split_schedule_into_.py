"""refactored db to split schedule into schedule and time_slots

Revision ID: 72833d86f67a
Revises: 07e46d8c4322
Create Date: 2025-03-14 14:26:57.298664

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql

# revision identifiers, used by Alembic.
revision: str = '72833d86f67a'
down_revision: Union[str, None] = '07e46d8c4322'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('time_slots',
    sa.Column('slot_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('schedule_id', sa.Integer(), nullable=False),
    sa.Column('start_time', sa.Time(), nullable=False),
    sa.Column('end_time', sa.Time(), nullable=False),
    sa.Column('is_available', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['schedule_id'], ['schedule.schedule_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('slot_id'),
    sa.UniqueConstraint('schedule_id', 'start_time', 'end_time', name='uq_schedule_time')
    )
    op.create_table('appointment_time_slots',
    sa.Column('slot_id', sa.Integer(), nullable=False),
    sa.Column('appointment_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['appointment_id'], ['appointment.appointment_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['slot_id'], ['time_slots.slot_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('slot_id', 'appointment_id')
    )
    op.add_column('schedule', sa.Column('is_working', sa.Boolean(), nullable=False))
    op.create_unique_constraint('uq_barber_date', 'schedule', ['barber_id', 'date'])
    op.drop_constraint('schedule_ibfk_1', 'schedule', type_='foreignkey')
    op.drop_constraint('schedule_ibfk_2', 'schedule', type_='foreignkey')
    op.create_foreign_key(None, 'schedule', 'barber', ['barber_id'], ['barber_id'])
    op.drop_column('schedule', 'appointment_id')
    op.drop_column('schedule', 'endTime')
    op.drop_column('schedule', 'startTime')

    # Define tables for inserting data
    status_enum = sa.Enum('pending', 'confirmed', 'completed', 'cancelled', name='appointment_status')

    users_table = sa.table(
        'user',
        sa.column('user_id', sa.Integer),
        sa.column('firstName', sa.String(50)),
        sa.column('lastName', sa.String(50)),
        sa.column('email', sa.String(50)),
        sa.column('password', sa.String(50)),
        sa.column('phoneNumber', sa.String(10)),
        sa.column('is_admin', sa.Boolean)
    )

    barbers_table = sa.table(
        'barber',
        sa.column('barber_id', sa.Integer),
        sa.column('user_id', sa.Integer)
    )

    appointments_table = sa.table(
        'appointment',
        sa.column('appointment_id', sa.Integer),
        sa.column('user_id', sa.Integer),
        sa.column('barber_id', sa.Integer),
        sa.column('status', status_enum)
    )

    services_table = sa.table(
        'service',
        sa.column('service_id', sa.Integer),
        sa.column('name', sa.String(50)),
        sa.column('duration', sa.Time),
        sa.column('price', sa.Float(5, 2))
    )

    appointment_services_table = sa.table(
        'appointment_service',
        sa.column('service_id', sa.Integer),
        sa.column('appointment_id', sa.Integer)
    )

    schedules_table = sa.table(
        'schedule',
        sa.column('schedule_id', sa.Integer),
        sa.column('barber_id', sa.Integer),
        sa.column('date', sa.Date),
        sa.column('is_working', sa.Boolean)
    )

    time_slots_table = sa.table(
        'time_slots',
        sa.column('slot_id', sa.Integer),
        sa.column('schedule_id', sa.Integer),
        sa.column('start_time', sa.Time),
        sa.column('end_time', sa.Time),
        sa.column('is_available', sa.Boolean)
    )

    appointment_time_slots_table = sa.table(
        'appointment_time_slots',
        sa.column('slot_id', sa.Integer),
        sa.column('appointment_id', sa.Integer)
    )

    threads_table = sa.table(
        'thread',
        sa.column('thread_id', sa.Integer),
        sa.column('receivingUser', sa.Integer),
        sa.column('sendingUser', sa.Integer)
    )

    messages_table = sa.table(
        'message',
        sa.column('message_id', sa.Integer),
        sa.column('thread_id', sa.Integer),
        sa.column('hasActiveMessage', sa.Boolean),
        sa.column('text', sa.Text),
        sa.column('timeStamp', sa.DateTime)
    )

    # Sample Data insert
    op.bulk_insert(
        users_table,
        [
            {
                "firstName": "John",
                "lastName": "Doe",
                "email": "john.doe@example.com",
                "phoneNumber": "1234567890",
                "password": "hashedpassword1",
                "is_admin": True,
            },
            {
                "firstName": "Jane",
                "lastName": "Smith",
                "email": "jane.smith@example.com",
                "password": "hashedpassword2",
                "phoneNumber": "0987654321",
                "is_admin": False
            },
            {
                "firstName": "Mike",
                "lastName": "Johnson",
                "email": "mike.johnson@example.com",
                "password": "hashedpassword3",
                "phoneNumber": "1122334455",
                "is_admin": True
            },
            {
                "firstName": "Sarah",
                "lastName": "Brown",
                "email": "sarah.brown@example.com",
                "password": "hashedpassword4",
                "phoneNumber": "6677889900",
                "is_admin": False
            }
        ]
    )

    op.bulk_insert(
        barbers_table,
        [
            {
                "user_id": 1
            },
            {
                "user_id": 3
            }
        ]
    )

    op.bulk_insert(
        services_table,
        [
            {
                "name": "Haircut",
                "duration": "00:30:00",
                "price": 20.00
            },
            {
                "name": "Beard Trim",
                "duration": "00:15:00",
                "price": 10.00
            },
            {
                "name": "Shave",
                "duration": "00:20:00",
                "price": 15.00
            },
            {
                "name": "Hair Coloring",
                "duration": "01:00:00",
                "price": 50.00
            }
        ]
    )

    op.bulk_insert(
        appointments_table,
        [
            {
                "user_id": 2,
                "barber_id": 1,
                "status": "confirmed"
            },
            {
                "user_id": 4,
                "barber_id": 2,
                "status": "confirmed"
            }
        ]
    )

    op.bulk_insert(
        appointment_services_table,
        [
            {
                "service_id": 1,
                "appointment_id": 1
            },
            {
                "service_id": 3,
                "appointment_id": 2
            }
        ]
    )

    op.bulk_insert(
        schedules_table,
        [
            {
                "schedule_id": 1,
                "barber_id": 1,
                "date": "2025-02-17",
                "is_working": True
            },
            {
                "schedule_id": 2,
                "barber_id": 2,
                "date": "2025-02-17",
                "is_working": True
            }
        ]
    )

    op.bulk_insert(
        time_slots_table,
        [
            { "slot_id": 1, "schedule_id": 1, "start_time": "09:00:00", "end_time": "09:30:00", "is_available": False },
            { "slot_id": 2, "schedule_id": 1, "start_time": "09:30:00", "end_time": "10:00:00", "is_available": True },
            { "slot_id": 3, "schedule_id": 1, "start_time": "10:00:00", "end_time": "10:30:00", "is_available": True },
            { "slot_id": 4, "schedule_id": 1, "start_time": "10:30:00", "end_time": "11:00:00", "is_available": True },
            { "slot_id": 5, "schedule_id": 1, "start_time": "11:00:00", "end_time": "11:30:00", "is_available": True },
            { "slot_id": 6, "schedule_id": 1, "start_time": "11:30:00", "end_time": "12:00:00", "is_available": True },
            { "slot_id": 7, "schedule_id": 1, "start_time": "12:30:00", "end_time": "13:00:00", "is_available": True },
            { "slot_id": 8, "schedule_id": 1, "start_time": "13:00:00", "end_time": "13:30:00", "is_available": True },
            { "slot_id": 9, "schedule_id": 1, "start_time": "13:30:00", "end_time": "14:00:00", "is_available": True },
            { "slot_id": 10, "schedule_id": 1, "start_time": "14:00:00", "end_time": "14:30:00", "is_available": True },
            { "slot_id": 11, "schedule_id": 1, "start_time": "14:30:00", "end_time": "15:00:00", "is_available": True },
            { "slot_id": 12, "schedule_id": 1, "start_time": "15:00:00", "end_time": "15:30:00", "is_available": True },
            { "slot_id": 13, "schedule_id": 1, "start_time": "15:30:00", "end_time": "16:00:00", "is_available": True },
            { "slot_id": 14, "schedule_id": 1, "start_time": "16:00:00", "end_time": "16:30:00", "is_available": True },
            { "slot_id": 15, "schedule_id": 1, "start_time": "16:30:00", "end_time": "17:00:00", "is_available": True },
            { "slot_id": 16, "schedule_id": 2, "start_time": "09:00:00", "end_time": "09:30:00", "is_available": False },
            { "slot_id": 17, "schedule_id": 2, "start_time": "09:30:00", "end_time": "10:00:00", "is_available": True },
            { "slot_id": 18, "schedule_id": 2, "start_time": "10:00:00", "end_time": "10:30:00", "is_available": True },
            { "slot_id": 19, "schedule_id": 2, "start_time": "10:30:00", "end_time": "11:00:00", "is_available": True },
            { "slot_id": 20, "schedule_id": 2, "start_time": "11:00:00", "end_time": "11:30:00", "is_available": True },
            { "slot_id": 21, "schedule_id": 2, "start_time": "11:30:00", "end_time": "12:00:00", "is_available": True },
            { "slot_id": 22, "schedule_id": 2, "start_time": "12:30:00", "end_time": "13:00:00", "is_available": True },
            { "slot_id": 23, "schedule_id": 2, "start_time": "13:00:00", "end_time": "13:30:00", "is_available": True },
            { "slot_id": 24, "schedule_id": 2, "start_time": "13:30:00", "end_time": "14:00:00", "is_available": True },
            { "slot_id": 25, "schedule_id": 2, "start_time": "14:00:00", "end_time": "14:30:00", "is_available": True },
            { "slot_id": 26, "schedule_id": 2, "start_time": "14:30:00", "end_time": "15:00:00", "is_available": True },
            { "slot_id": 27, "schedule_id": 2, "start_time": "15:00:00", "end_time": "15:30:00", "is_available": True },
            { "slot_id": 28, "schedule_id": 2, "start_time": "15:30:00", "end_time": "16:00:00", "is_available": True },
            { "slot_id": 29, "schedule_id": 2, "start_time": "16:00:00", "end_time": "16:30:00", "is_available": True },
            { "slot_id": 30, "schedule_id": 2, "start_time": "16:30:00", "end_time": "17:00:00", "is_available": True }
        ]
    )

    op.bulk_insert(
        appointment_time_slots_table,
        [
            { "slot_id": 1, "appointment_id": 1 },
            { "slot_id": 16, "appointment_id": 2 }
        ]
    )

    op.bulk_insert(
        threads_table,
        [
            {
                "thread_id": 1,
                "receivingUser": 1,
                "sendingUser": 2
            },
            {
                "thread_id": 2,
                "receivingUser": 3,
                "sendingUser": 4
            }
        ]
    )

    op.bulk_insert(
        messages_table,
        [
            {
                "message_id": 1,
                "thread_id": 1,
                "hasActiveMessage": False,
                "text": "Hi John, I have a question about my upcoming appointment.",
                "timeStamp": "2025-02-16T10:00:00"
            },
            {
                "message_id": 2,
                "thread_id": 1,
                "hasActiveMessage": True,
                "text": "Hi Jane, sure. What can I help you with?",
                "timeStamp": "2025-02-16T10:05:00"
            },
            {
                "message_id": 3,
                "thread_id": 2,
                "hasActiveMessage": False,
                "text": "Hello Mike, I need to reschedule my appointment.",
                "timeStamp": "2025-02-16T11:00:00"
            },
            {
                "message_id": 4,
                "thread_id": 2,
                "hasActiveMessage": True,
                "text": "Hi Sarah, that's fine. Let me know your preferred time.",
                "timeStamp": "2025-02-16T11:10:00"
            }
        ]
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('schedule', sa.Column('startTime', mysql.TIME(), nullable=False))
    op.add_column('schedule', sa.Column('endTime', mysql.TIME(), nullable=False))
    op.add_column('schedule', sa.Column('appointment_id', mysql.INTEGER(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'schedule', type_='foreignkey')
    op.create_foreign_key('schedule_ibfk_2', 'schedule', 'barber', ['barber_id'], ['barber_id'], ondelete='CASCADE')
    op.create_foreign_key('schedule_ibfk_1', 'schedule', 'appointment', ['appointment_id'], ['appointment_id'], ondelete='CASCADE')
    op.drop_constraint('uq_barber_date', 'schedule', type_='unique')
    op.drop_column('schedule', 'is_working')
    op.drop_table('appointment_time_slots')
    op.drop_table('time_slots')
    # ### end Alembic commands ###
